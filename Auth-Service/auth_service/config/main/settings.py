"""
Django settings for authentication project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
import environ
import logging
from datetime import timedelta
from utils.helper import create_dir
from .logging_v import SysLogging, creating_loging_config
from .helper import ensure_env_file

env = environ.Env(
    DEBUG=(bool, False)
)
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

TEMPLATES = (
    BASE_DIR / "templates",
)

LOG = create_dir(BASE_DIR / "../../" / "configs/logs/services/auth_service")

    

LOGGING = SysLogging(**creating_loging_config(LOG)).get_logger()

settings_log = logging.getLogger('settings')



# Load the main .env file
environ.Env.read_env(BASE_DIR / ".env")

# Get the environment name
current_env = env("ENV", default="development")

if not current_env:
    settings_log.error("Environment variable 'ENV' is not set.")

CONFIG_DIR = BASE_DIR / "conf/ENV" / current_env

shared_files = [BASE_DIR / "conf/ENV/base.env"]

variable_files = shared_files + [ CONFIG_DIR / "api_keys.env",
                  CONFIG_DIR / "db.env",
                  CONFIG_DIR / "services.env",
                  CONFIG_DIR / "secret_keys.env",
                  ]

for env_file in variable_files:
    if os.path.exists(env_file):
       environ.Env.read_env(env_file)
       settings_log.info(f"Loaded environment variables from {env_file}")
    else:
        settings_log.error(f"{env_file} does not exist.")
        
#JWT Authentication Configurations With Django Rest Framework

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
}



SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=15),  # Short-lived for security
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),  # Long-lived for user convenience
    'ROTATE_REFRESH_TOKENS': True,  # Issue a new refresh token on every use
    'BLACKLIST_AFTER_ROTATION': True,  # Blacklist old refresh tokens after rotation
    'UPDATE_LAST_LOGIN': True,  # Update the `last_login` field on successful login

    # Security enhancements
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': 'your-secure-secret-key',  # Store securely, e.g., via environment variables
    'VERIFYING_KEY': None,
    'AUDIENCE': 'your-audience',
    'ISSUER': 'your-issuer',
    'AUTH_HEADER_TYPES': ('Bearer',),

    # Custom claims
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',

    # Token types
    'TOKEN_TYPE_CLAIM': 'token_type',
}


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env('DEBUG')

# Fetch the ALLOWED_HOSTS from the environment variable
ALLOWED_HOSTS = env('ALLOWED_HOSTS', default='localhost').split(',')

# Optionally, you can validate or clean the list
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS if host.strip()]
# Application definition


# Application definition

INSTALLED_APPS = [
    #Configurations
    'config.apps.main.ConfigurationsConfig',
    'sys_media.apps.SysMediaConfig',
    'utils.apps.UtilsConfig',

    #Auth Service Apps
    'auth_db.apps.AuthDBConfig',
    'progress.apps.ProgressConfig',
    'user_profile.apps.UserProfileConfig',
    
    #Django Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

#JWT AUTH SERVICES
INSTALLED_APPS += [
    'rest_framework_simplejwt.token_blacklist',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'auth_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'auth_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases



DATABASE_URL = env('DATABASE_URL', default=None)
if DATABASE_URL is None:
    settings_log.error("DATABASE_URL not set in environment variables.")
    raise ValueError("DATABASE_URL is required.")



DATABASES = {
     'default': env.db()
}

AUTH_USER_MODEL = "auth_db.User"


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "dev_static/"]

STATIC_ROOT = "sys_static/authentication"

MEDIA_URL = "media/"
MEDIA_ROOT = "sys_media/media/authentication"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
