"""
Django settings for video_service project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from pathlib import Path
import environ
import logging
from utils.helper import create_dir
from .logging_v import SysLogging, creating_loging_config
from .helper import ensure_env_file

env = environ.Env(
    DEBUG=(bool,False)
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

TEMPLATES = (
    BASE_DIR / "templates",
)

LOG = create_dir(BASE_DIR / "../../" / "configs/logs/services/payment_service")



LOGGING = SysLogging(**creating_loging_config(LOG)).get_logger()

settings_log = logging.getLogger('settings')

# settings_log = logging.getLogger('settings')


# Load the main .env file
environ.Env.read_env(BASE_DIR / "main.env")

# Get the environment name
current_env = env("ENV", default="development")

if not current_env:
    settings_log.error("Environment variable 'ENV' in main.env is not set.")

ENVIRONMENT_DIR = BASE_DIR / "config/ENV" / current_env

BASE_ENVIRONMENT_DIR = BASE_DIR / "config/ENV/base.env"

ENVIRONMENT_FILES = ["api_keys.env", "db.env", "secret_keys.env", "services.env"]


ENVIRONMENT_DIR_FILES = [ENVIRONMENT_DIR / file for file in ENVIRONMENT_FILES] 
ENVIRONMENT_DIR_FILES.insert(0, BASE_ENVIRONMENT_DIR)


for env_file in ENVIRONMENT_DIR_FILES:
    if os.path.isfile(env_file):    
        try:
            environ.Env.read_env(env_file)
            settings_log.info(f"Loaded environment variables from {env_file}")
        except Exception as e:
            settings_log.error(f"Error reading environment file {env_file}: {e}")
            # Consider what to do if reading the .env file fails.
            # Should the program exit?  Use default values?
    
    ensure_env_file(env_file)
        


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG')

# Fetch the ALLOWED_HOSTS from the environment variable
ALLOWED_HOSTS = env('ALLOWED_HOSTS', default='localhost').split(',')

# Optionally, you can validate or clean the list
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS if host.strip()]
# Application definition

INSTALLED_APPS = [
    #Configurations
    'config.main.apps.ConfigurationsConfig',
    'sys_media.apps.SysMediaConfig',
    'utils.apps.UtilsConfig',
    
    #System Apps
    'utils.apps.UtilsConfig',
    
    #Django Build-in Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    
    #i18n transtation apps
    'rosetta',
    'statici18n',
    
    #other extesions
    'django_extensions',
    'django_countries',         
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'payment_service.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': TEMPLATES,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
            ],
        },
    },
]

WSGI_APPLICATION = 'payment_service.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# DATABASE_URL = env('DATABASE_URL', default=None)
# if DATABASE_URL is None:
#     logger.error("DATABASE_URL not set in environment variables.")
#     raise ValueError("DATABASE_URL is required.")


DATABASES = {
    'default': #env.db()
        {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env("POSTGRES_DB"),
        'USER': env("POSTGRES_USER"),
        'PASSWORD': env("POSTGRES_PASSWORD"),
        'HOST': env("POSTGRES_HOST"),
        'PORT': env("POSTGRES_PORT"),
        },
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': BASE_DIR / 'db.sqlite3',
    # }
        # local_db if local_db else 
        
}

AUTH_USER_MODEL = 'users.User'

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
from django.utils.translation import gettext_lazy as _


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGES = (
    ('en', _('English')),
    ('es', _('Spanish')),
    ('fr', _('French')),
    ('rw', 'Kinyarwanda'),
)

LOCALE_PATH = create_dir(BASE_DIR / 'locale')


# Create subdirectories for each language
for code, _ in LANGUAGES:
    language_dir = create_dir(LOCALE_PATH / code / 'LC_MESSAGES')


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [BASE_DIR / "dev_static/"]

STATIC_ROOT = BASE_DIR / "sys_static/payment"

MEDIA_URL = '/learn_files/'
MEDIA_ROOT = create_dir(BASE_DIR / "sys_media/media/payment")

FILE_UPLOAD_TEMP_DIR = create_dir(BASE_DIR / 'sys_media'/ 'media' / 'temp')

# For optimal performance with model.save():
FILE_UPLOAD_MAX_MEMORY_SIZE = 200 * 1024 * 1024  # 200MB
UPLOAD_CHUNK_SIZE = 2 * 1024 * 1024  # 2MB chunks

# Add timeout settings
DATA_UPLOAD_MAX_MEMORY_SIZE = 200 * 1024 * 1024  # 200MB
REQUEST_TIMEOUT = 300  # 5 minutes


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


#======================================================> SENDING EMAILS <========================================#
#================================================================================================================#

# settings.py
EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'
CELERY_EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'djcelery_email.backends.CeleryEmailBackend'
CELERY_EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'  # Production
# settings.py
EMAIL_BACKEND = 'django.core.mail.backends.locmem.EmailBackend'
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Development

EMAIL_HOST = 'smtp.gmail.com.com'  
EMAIL_PORT = 587  # For TLS
EMAIL_USE_TLS = True
EMAIL_HOST_USER = 'your@email.com'
EMAIL_HOST_PASSWORD = 'yourpassword'
DEFAULT_FROM_EMAIL = 'noreply@yourdomain.com'


# # settings.py
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.sendgrid.net'  # Or your SMTP provider
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'apikey'  # For SendGrid/SES
# EMAIL_HOST_PASSWORD = os.getenv('EMAIL_API_KEY') 
# DEFAULT_FROM_EMAIL = 'no-reply@yourdomain.com'


# from django.core import mail
# print(mail.outbox)  # Shows all sent emails during test