# Generated by Django 5.1.7 on 2025-04-27 02:18

import django.core.validators
import django.db.models.deletion
import django_extensions.db.fields
import sys_media.helper
import utils.slug_fields
import utils.sys_mixins.media
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.CategorySlug.get_slug, unique=True)),
                ('description', models.TextField(blank=True, db_index=True)),
                ('icon', models.ImageField(blank=True, null=True, upload_to='category_icon/')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['is_active'], name='idx_category_is_active')],
                'constraints': [models.UniqueConstraint(fields=('name',), name='unique_category_name'), models.UniqueConstraint(fields=('slug',), name='unique_category_slug')],
            },
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.CourseSlug.get_slug, unique=True)),
                ('short_description', models.CharField(db_index=True, max_length=300)),
                ('description', models.TextField(db_index=True)),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=10, validators=[django.core.validators.MinValueValidator(0.01)])),
                ('is_free', models.BooleanField(default=False)),
                ('level', models.CharField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], default='beginner', max_length=20)),
                ('language', models.CharField(choices=[('en', 'ðŸ‡ºðŸ‡¸ English'), ('es', 'ðŸ‡ªðŸ‡¸ Spanish'), ('fr', 'ðŸ‡«ðŸ‡· French'), ('rw', 'ðŸ‡·ðŸ‡¼ Kinyarwanda')], default='en', max_length=10)),
                ('is_published', models.BooleanField(default=False)),
                ('published_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('duration', models.DurationField(blank=True, help_text='Total length of course (HH:MM:SS)', null=True)),
                ('is_featured', models.BooleanField(db_index=True, default=False, verbose_name='Whether the course is featured.')),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='courses', to='courses.category')),
                ('instructor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='courses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Course',
                'verbose_name_plural': 'Courses',
                'ordering': ['-created_at', '-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='CourseDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_filename', models.CharField(blank=True, db_index=True, help_text='Original name of the uploaded file', max_length=255, null=True, verbose_name='Original filename')),
                ('title', models.CharField(db_index=True, help_text='Title for the file', max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, db_index=True, help_text='Description of the file', null=True, verbose_name='Description')),
                ('file_size', models.BigIntegerField(blank=True, db_index=True, editable=False, help_text='Size of the file in bytes', null=True, verbose_name='File size')),
                ('content_type', models.CharField(blank=True, db_index=True, editable=False, help_text='MIME type of the file', max_length=255, verbose_name='Content type')),
                ('checksum', models.CharField(blank=True, db_index=True, editable=False, help_text='SHA-256 checksum of the file for integrity verification', max_length=64, verbose_name='Checksum')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the file was uploaded', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the file record was last updated', verbose_name='Updated at')),
                ('is_public', models.BooleanField(db_index=True, default=False, help_text='Whether the file is publicly accessible', verbose_name='Is public')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.MediaSlug.get_slug, unique=True)),
                ('file', models.FileField(help_text='Uploaded document file', max_length=255, upload_to=sys_media.helper.get_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt', 'rtf', 'odt'])], verbose_name='Document file')),
                ('page_count', models.PositiveIntegerField(blank=True, db_index=True, editable=False, help_text='Number of pages in the document', null=True, verbose_name='Page count')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='courses.course')),
            ],
            options={
                'verbose_name': 'Course Document',
                'verbose_name_plural': 'Course Documents',
            },
            bases=(utils.sys_mixins.media.AutoDeleteFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CourseThumbnail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_filename', models.CharField(blank=True, db_index=True, help_text='Original name of the uploaded file', max_length=255, null=True, verbose_name='Original filename')),
                ('title', models.CharField(db_index=True, help_text='Title for the file', max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, db_index=True, help_text='Description of the file', null=True, verbose_name='Description')),
                ('file_size', models.BigIntegerField(blank=True, db_index=True, editable=False, help_text='Size of the file in bytes', null=True, verbose_name='File size')),
                ('content_type', models.CharField(blank=True, db_index=True, editable=False, help_text='MIME type of the file', max_length=255, verbose_name='Content type')),
                ('checksum', models.CharField(blank=True, db_index=True, editable=False, help_text='SHA-256 checksum of the file for integrity verification', max_length=64, verbose_name='Checksum')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the file was uploaded', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the file record was last updated', verbose_name='Updated at')),
                ('is_public', models.BooleanField(db_index=True, default=False, help_text='Whether the file is publicly accessible', verbose_name='Is public')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.MediaSlug.get_slug, unique=True)),
                ('file', models.ImageField(blank=True, help_text='Uploaded image file', max_length=255, upload_to=sys_media.helper.get_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'])], verbose_name='Image file')),
                ('width', models.PositiveIntegerField(blank=True, db_index=True, editable=False, help_text='Width of the image in pixels', null=True, verbose_name='Width')),
                ('height', models.PositiveIntegerField(blank=True, db_index=True, editable=False, help_text='Height of the image in pixels', null=True, verbose_name='Height')),
                ('alt_text', models.CharField(blank=True, db_index=True, help_text='Alternative text for accessibility', max_length=255, null=True, verbose_name='Alt text')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thumbnails', to='courses.course')),
            ],
            options={
                'verbose_name': 'Course Thumbnail',
                'verbose_name_plural': 'Course Thumbnails',
            },
            bases=(utils.sys_mixins.media.AutoDeleteFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CourseVideoIntro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_filename', models.CharField(blank=True, db_index=True, help_text='Original name of the uploaded file', max_length=255, null=True, verbose_name='Original filename')),
                ('title', models.CharField(db_index=True, help_text='Title for the file', max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, db_index=True, help_text='Description of the file', null=True, verbose_name='Description')),
                ('file_size', models.BigIntegerField(blank=True, db_index=True, editable=False, help_text='Size of the file in bytes', null=True, verbose_name='File size')),
                ('content_type', models.CharField(blank=True, db_index=True, editable=False, help_text='MIME type of the file', max_length=255, verbose_name='Content type')),
                ('checksum', models.CharField(blank=True, db_index=True, editable=False, help_text='SHA-256 checksum of the file for integrity verification', max_length=64, verbose_name='Checksum')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the file was uploaded', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the file record was last updated', verbose_name='Updated at')),
                ('is_public', models.BooleanField(db_index=True, default=False, help_text='Whether the file is publicly accessible', verbose_name='Is public')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.MediaSlug.get_slug, unique=True)),
                ('file', models.FileField(help_text='Uploaded video file', max_length=255, upload_to=sys_media.helper.get_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'webm', 'mov', 'avi', 'mkv'])], verbose_name='Video file')),
                ('duration', models.PositiveIntegerField(blank=True, db_index=True, editable=False, help_text='Duration of the video in seconds', null=True, verbose_name='Duration')),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail image for the video', null=True, upload_to=sys_media.helper.get_file_upload_path, verbose_name='Thumbnail')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videointro', to='courses.course')),
            ],
            options={
                'verbose_name': 'Course Video Intro',
                'verbose_name_plural': 'Course Video Intros',
            },
            bases=(utils.sys_mixins.media.AutoDeleteFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Module',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.ModuleSlug.get_slug, unique=True)),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('is_published', models.BooleanField(db_index=True, default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='modules', to='courses.course')),
            ],
            options={
                'verbose_name': 'Course Module',
                'verbose_name_plural': 'Course Modules',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.LessonSlug.get_slug, unique=True)),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('duration', models.DurationField(blank=True, null=True)),
                ('order', models.PositiveIntegerField(db_index=True, default=0)),
                ('is_preview', models.BooleanField(db_index=True, default=False)),
                ('is_published', models.BooleanField(db_index=True, default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='courses.module')),
            ],
            options={
                'verbose_name': 'Course Module Lesson',
                'verbose_name_plural': 'Course Module Lessons',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='ModuleDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_filename', models.CharField(blank=True, db_index=True, help_text='Original name of the uploaded file', max_length=255, null=True, verbose_name='Original filename')),
                ('title', models.CharField(db_index=True, help_text='Title for the file', max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, db_index=True, help_text='Description of the file', null=True, verbose_name='Description')),
                ('file_size', models.BigIntegerField(blank=True, db_index=True, editable=False, help_text='Size of the file in bytes', null=True, verbose_name='File size')),
                ('content_type', models.CharField(blank=True, db_index=True, editable=False, help_text='MIME type of the file', max_length=255, verbose_name='Content type')),
                ('checksum', models.CharField(blank=True, db_index=True, editable=False, help_text='SHA-256 checksum of the file for integrity verification', max_length=64, verbose_name='Checksum')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the file was uploaded', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the file record was last updated', verbose_name='Updated at')),
                ('is_public', models.BooleanField(db_index=True, default=False, help_text='Whether the file is publicly accessible', verbose_name='Is public')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.MediaSlug.get_slug, unique=True)),
                ('file', models.FileField(help_text='Uploaded document file', max_length=255, upload_to=sys_media.helper.get_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt', 'rtf', 'odt'])], verbose_name='Document file')),
                ('page_count', models.PositiveIntegerField(blank=True, db_index=True, editable=False, help_text='Number of pages in the document', null=True, verbose_name='Page count')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='courses.module')),
            ],
            options={
                'verbose_name': 'Module Document Intro',
                'verbose_name_plural': 'Module Document Intro',
            },
            bases=(utils.sys_mixins.media.AutoDeleteFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ModuleDocumentLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_filename', models.CharField(blank=True, db_index=True, help_text='Original name of the uploaded file', max_length=255, null=True, verbose_name='Original filename')),
                ('title', models.CharField(db_index=True, help_text='Title for the file', max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, db_index=True, help_text='Description of the file', null=True, verbose_name='Description')),
                ('file_size', models.BigIntegerField(blank=True, db_index=True, editable=False, help_text='Size of the file in bytes', null=True, verbose_name='File size')),
                ('content_type', models.CharField(blank=True, db_index=True, editable=False, help_text='MIME type of the file', max_length=255, verbose_name='Content type')),
                ('checksum', models.CharField(blank=True, db_index=True, editable=False, help_text='SHA-256 checksum of the file for integrity verification', max_length=64, verbose_name='Checksum')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the file was uploaded', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the file record was last updated', verbose_name='Updated at')),
                ('is_public', models.BooleanField(db_index=True, default=False, help_text='Whether the file is publicly accessible', verbose_name='Is public')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.MediaSlug.get_slug, unique=True)),
                ('file', models.FileField(help_text='Uploaded document file', max_length=255, upload_to=sys_media.helper.get_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf', 'doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'txt', 'rtf', 'odt'])], verbose_name='Document file')),
                ('page_count', models.PositiveIntegerField(blank=True, db_index=True, editable=False, help_text='Number of pages in the document', null=True, verbose_name='Page count')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='courses.lesson')),
            ],
            options={
                'verbose_name': 'Module Lesson Document',
                'verbose_name_plural': 'Module Lesson Documents',
            },
            bases=(utils.sys_mixins.media.AutoDeleteFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ModuleImageLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_filename', models.CharField(blank=True, db_index=True, help_text='Original name of the uploaded file', max_length=255, null=True, verbose_name='Original filename')),
                ('title', models.CharField(db_index=True, help_text='Title for the file', max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, db_index=True, help_text='Description of the file', null=True, verbose_name='Description')),
                ('file_size', models.BigIntegerField(blank=True, db_index=True, editable=False, help_text='Size of the file in bytes', null=True, verbose_name='File size')),
                ('content_type', models.CharField(blank=True, db_index=True, editable=False, help_text='MIME type of the file', max_length=255, verbose_name='Content type')),
                ('checksum', models.CharField(blank=True, db_index=True, editable=False, help_text='SHA-256 checksum of the file for integrity verification', max_length=64, verbose_name='Checksum')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the file was uploaded', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the file record was last updated', verbose_name='Updated at')),
                ('is_public', models.BooleanField(db_index=True, default=False, help_text='Whether the file is publicly accessible', verbose_name='Is public')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.MediaSlug.get_slug, unique=True)),
                ('file', models.ImageField(blank=True, help_text='Uploaded image file', max_length=255, upload_to=sys_media.helper.get_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'])], verbose_name='Image file')),
                ('width', models.PositiveIntegerField(blank=True, db_index=True, editable=False, help_text='Width of the image in pixels', null=True, verbose_name='Width')),
                ('height', models.PositiveIntegerField(blank=True, db_index=True, editable=False, help_text='Height of the image in pixels', null=True, verbose_name='Height')),
                ('alt_text', models.CharField(blank=True, db_index=True, help_text='Alternative text for accessibility', max_length=255, null=True, verbose_name='Alt text')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='courses.lesson')),
            ],
            options={
                'verbose_name': 'Module Lesson image',
                'verbose_name_plural': 'Module Lesson images',
            },
            bases=(utils.sys_mixins.media.AutoDeleteFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ModuleThumbnail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_filename', models.CharField(blank=True, db_index=True, help_text='Original name of the uploaded file', max_length=255, null=True, verbose_name='Original filename')),
                ('title', models.CharField(db_index=True, help_text='Title for the file', max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, db_index=True, help_text='Description of the file', null=True, verbose_name='Description')),
                ('file_size', models.BigIntegerField(blank=True, db_index=True, editable=False, help_text='Size of the file in bytes', null=True, verbose_name='File size')),
                ('content_type', models.CharField(blank=True, db_index=True, editable=False, help_text='MIME type of the file', max_length=255, verbose_name='Content type')),
                ('checksum', models.CharField(blank=True, db_index=True, editable=False, help_text='SHA-256 checksum of the file for integrity verification', max_length=64, verbose_name='Checksum')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the file was uploaded', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the file record was last updated', verbose_name='Updated at')),
                ('is_public', models.BooleanField(db_index=True, default=False, help_text='Whether the file is publicly accessible', verbose_name='Is public')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.MediaSlug.get_slug, unique=True)),
                ('file', models.ImageField(blank=True, help_text='Uploaded image file', max_length=255, upload_to=sys_media.helper.get_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['jpg', 'jpeg', 'png', 'gif', 'webp', 'svg'])], verbose_name='Image file')),
                ('width', models.PositiveIntegerField(blank=True, db_index=True, editable=False, help_text='Width of the image in pixels', null=True, verbose_name='Width')),
                ('height', models.PositiveIntegerField(blank=True, db_index=True, editable=False, help_text='Height of the image in pixels', null=True, verbose_name='Height')),
                ('alt_text', models.CharField(blank=True, db_index=True, help_text='Alternative text for accessibility', max_length=255, null=True, verbose_name='Alt text')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='thumbnails', to='courses.module')),
            ],
            options={
                'verbose_name': 'Module Thumbnail',
                'verbose_name_plural': 'Module Thumbnails',
            },
            bases=(utils.sys_mixins.media.AutoDeleteFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ModuleVideoIntro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_filename', models.CharField(blank=True, db_index=True, help_text='Original name of the uploaded file', max_length=255, null=True, verbose_name='Original filename')),
                ('title', models.CharField(db_index=True, help_text='Title for the file', max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, db_index=True, help_text='Description of the file', null=True, verbose_name='Description')),
                ('file_size', models.BigIntegerField(blank=True, db_index=True, editable=False, help_text='Size of the file in bytes', null=True, verbose_name='File size')),
                ('content_type', models.CharField(blank=True, db_index=True, editable=False, help_text='MIME type of the file', max_length=255, verbose_name='Content type')),
                ('checksum', models.CharField(blank=True, db_index=True, editable=False, help_text='SHA-256 checksum of the file for integrity verification', max_length=64, verbose_name='Checksum')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the file was uploaded', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the file record was last updated', verbose_name='Updated at')),
                ('is_public', models.BooleanField(db_index=True, default=False, help_text='Whether the file is publicly accessible', verbose_name='Is public')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.MediaSlug.get_slug, unique=True)),
                ('file', models.FileField(help_text='Uploaded video file', max_length=255, upload_to=sys_media.helper.get_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'webm', 'mov', 'avi', 'mkv'])], verbose_name='Video file')),
                ('duration', models.PositiveIntegerField(blank=True, db_index=True, editable=False, help_text='Duration of the video in seconds', null=True, verbose_name='Duration')),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail image for the video', null=True, upload_to=sys_media.helper.get_file_upload_path, verbose_name='Thumbnail')),
                ('module', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='video_intro', to='courses.module')),
            ],
            options={
                'verbose_name': 'Module Video Intro',
                'verbose_name_plural': 'Module Video Intro',
            },
            bases=(utils.sys_mixins.media.AutoDeleteFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ModuleVideoLesson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('original_filename', models.CharField(blank=True, db_index=True, help_text='Original name of the uploaded file', max_length=255, null=True, verbose_name='Original filename')),
                ('title', models.CharField(db_index=True, help_text='Title for the file', max_length=255, verbose_name='Title')),
                ('description', models.TextField(blank=True, db_index=True, help_text='Description of the file', null=True, verbose_name='Description')),
                ('file_size', models.BigIntegerField(blank=True, db_index=True, editable=False, help_text='Size of the file in bytes', null=True, verbose_name='File size')),
                ('content_type', models.CharField(blank=True, db_index=True, editable=False, help_text='MIME type of the file', max_length=255, verbose_name='Content type')),
                ('checksum', models.CharField(blank=True, db_index=True, editable=False, help_text='SHA-256 checksum of the file for integrity verification', max_length=64, verbose_name='Checksum')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, help_text='Timestamp when the file was uploaded', verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, help_text='Timestamp when the file record was last updated', verbose_name='Updated at')),
                ('is_public', models.BooleanField(db_index=True, default=False, help_text='Whether the file is publicly accessible', verbose_name='Is public')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from=utils.slug_fields.MediaSlug.get_slug, unique=True)),
                ('file', models.FileField(help_text='Uploaded video file', max_length=255, upload_to=sys_media.helper.get_file_upload_path, validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['mp4', 'webm', 'mov', 'avi', 'mkv'])], verbose_name='Video file')),
                ('duration', models.PositiveIntegerField(blank=True, db_index=True, editable=False, help_text='Duration of the video in seconds', null=True, verbose_name='Duration')),
                ('thumbnail', models.ImageField(blank=True, help_text='Thumbnail image for the video', null=True, upload_to=sys_media.helper.get_file_upload_path, verbose_name='Thumbnail')),
                ('lesson', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='courses.lesson')),
            ],
            options={
                'verbose_name': 'Module Lesson Video',
                'verbose_name_plural': 'Module Lesson videos',
            },
            bases=(utils.sys_mixins.media.AutoDeleteFileMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=50, null=True)),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='courses.course')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['title'], name='idx_course_title'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['price'], name='idx_course_price'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_free'], name='idx_course_is_free'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['level'], name='idx_course_level'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['language'], name='idx_course_language'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['is_published'], name='idx_course_is_published'),
        ),
        migrations.AddIndex(
            model_name='course',
            index=models.Index(fields=['published_at'], name='idx_course_published_at'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.UniqueConstraint(fields=('slug',), name='unique_course_slug'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.UniqueConstraint(fields=('title', 'instructor'), name='unique_course_title_per_instructor'),
        ),
        migrations.AddConstraint(
            model_name='course',
            constraint=models.UniqueConstraint(fields=('title', 'category', 'instructor'), name='unique_course_title_category_instructor'),
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['course', 'slug'], name='courses_mod_course__665b64_idx'),
        ),
        migrations.AddIndex(
            model_name='module',
            index=models.Index(fields=['course', 'order'], name='courses_mod_course__20183c_idx'),
        ),
        migrations.AddConstraint(
            model_name='module',
            constraint=models.UniqueConstraint(fields=('course', 'slug'), name='unique_module_course_slug'),
        ),
        migrations.AddConstraint(
            model_name='module',
            constraint=models.UniqueConstraint(fields=('course', 'order'), name='unique_module_course_order'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['module', 'slug'], name='courses_les_module__c914e7_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['module', 'order'], name='courses_les_module__4accd4_idx'),
        ),
        migrations.AddIndex(
            model_name='lesson',
            index=models.Index(fields=['is_preview', 'is_published'], name='courses_les_is_prev_fea19f_idx'),
        ),
        migrations.AddConstraint(
            model_name='lesson',
            constraint=models.UniqueConstraint(fields=('module', 'slug'), name='unique_lesson_module_slug'),
        ),
        migrations.AddConstraint(
            model_name='lesson',
            constraint=models.UniqueConstraint(fields=('module', 'order'), name='unique_lesson_module_order'),
        ),
        migrations.AddIndex(
            model_name='tag',
            index=models.Index(fields=['name'], name='courses_tag_name_fabe02_idx'),
        ),
    ]
